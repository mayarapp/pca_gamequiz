# encoding: utf-8
from tkinter import *
 
from tkinter import messagebox as mb
import json
 

class Quiz:
    
    def __init__(self):
         
        
        self.q_no=0      
        self.display_title()
        self.display_question()
         
        # valor da questao selecionada
        self.opt_selected=IntVar()
         
        # botões de escolha
        self.opts=self.radio_buttons()
         
        # opções de resposta
        self.display_options()
         
        # botões para passar e sair
        self.buttons()
         
        # quantidade de questões 
        self.data_size=len(question)
         
        # contatos de respostas corretas
        self.correct=0
 
 
    # método que mostra o resultado ao final
    def display_result(self):
         
        # calcula as respostas erradas
        wrong_count = self.data_size - self.correct
        correct = f"Corretas: {self.correct}"
        wrong = f"Erradas: {wrong_count}"
         
        # calcula o percentual de acertos
        score = int(self.correct / self.data_size * 100)
        result = f"Total: {score}%"
         
        # mensagem final dos resultados
        mb.showinfo("Resultado", f"{result}\n{correct}\n{wrong}")
 
 
    # Confere a resposta correta
    def check_ans(self, q_no):         
        
        if self.opt_selected.get() == answer[q_no]:            
            return True
 
    # Contagem de respostas corretas
    def next_btn(self):
         
        
        if self.check_ans(self.q_no):             
            # se for correta soma 1
            self.correct += 1         
        
        self.q_no += 1
         
        # confere se foram todas as questões, se sim mostra o resultado
        if self.q_no==self.data_size:           
            
            self.display_result()           
            
            gui.destroy()
        else:
            # se não acabou, segue a questão
            self.display_question()
            self.display_options()
 
 
    # Botões de passar e sair
    def buttons(self):
         
        # Botão se passar questão
        next_button = Button(gui, text="PRÓXIMA",command=self.next_btn,
        width=10,bg="gray",fg="white",font=("Courier",12,"bold"))         
        next_button.place(x=350,y=380)
         
        # Botão de Fechar
        quit_button = Button(gui, text="SAIR", command=gui.destroy,
        width=5,bg="gray", fg="white",font=("Courier",12," bold"))        
        quit_button.place(x=50,y=380)
 
 
    # Tirar a seleção do botão na questão seguinte
    def display_options(self):
        val=0         
        
        self.opt_selected.set(0)        
        
        for option in options[self.q_no]:
            self.opts[val]['text']=option
            val+=1
 
 
    # Mostra a questão
    def display_question(self):
         
        # Questão
        q_no = Label(gui, text=question[self.q_no]
                     #, width=400
                     , bg='white',
        font=( 'Courier' ,12, 'bold' ), justify = 'center', anchor= 'w') 
        q_no.pack(fill='x',anchor='center')        
        q_no.place(x=10,y=100)        
 
 
    # Título
    def display_title(self):         
        
        title = Label(gui, text="Vamos jogar? É hora de aprender!",
        #width='100', 
        bg="#A9D08E",fg="gray", font=("Courier", 25, "bold"),relief=RAISED)           
        title.pack(side='top', fill='x')        
 
 
    # Botões de seleção de resposta
    def radio_buttons(self):
         
        q_list = []         
        
        y_pos = 180
         
        
        while len(q_list) < 2:             
            
            radio_btn = Radiobutton(gui,text=" ",variable=self.opt_selected,
            value = len(q_list)+1,font = ("Courier",12),bg='white')
             
            q_list.append(radio_btn)             
            
            radio_btn.place(x = 100, y = y_pos)             
            
            y_pos += 40         
        
        return q_list
 
# Interfave
gui = Tk()
 

#gui.geometry("1200x450") 
gui.title("Aprenda Feliz")
gui.configure(bg='white') 
gui.attributes('-fullscreen', True)
gui.bind('<Escape>',lambda e: root.destroy())


 
# Dados das questões em json
with open('questions.json',encoding='utf-8') as f:
    data = json.load(f)
 
# Variáveis
question = (data['question'])
options = (data['options'])
answer = (data[ 'answer'])
 
quiz = Quiz() 

gui.mainloop()
 
